{"version":3,"sources":["components/Button/Button.module.css","components/Counter/Value/Value.module.css","redux/actions.ts","components/Counter/Value/DisplayValue.tsx","components/Button/Button.tsx","components/Counter/Changes/Changes.tsx","components/Counter/Counter.tsx","components/SetCounter/SetValue/SetValue.tsx","components/SetCounter/Set/SetButton.tsx","components/SetCounter/SetCounter.tsx","redux/selectors.ts","App.tsx","redux/reducer.ts","redux/store.ts","utils/localstorage-utils.ts","index.tsx","components/SetCounter/SetValue/SetValue.module.css","components/Counter/Changes/Changes.module.css","App.module.css"],"names":["module","exports","ACTIONS_TYPE","DisplayValue","props","className","s","wrap","displayValue","maxValue","red","num","default","Button","restProps","finalClassName","Changes","disabled","isIncButtonDisabled","onClick","inc","reset","isResetButtonDisabled","Counter","SetValue","finalClassNameMax","isMaxInputError","error","finalClassNameStart","isStartInputError","value","title","type","onChange","e","changeMaxValue","currentTarget","startValue","changeStartValue","SetButton","isSetButtonDisabled","setNewValue","SetCounter","setDisplayValue","SET_DISPLAY_VALUE","payload","setIsSetButtonDisabled","SET_IS_SET_BUTTON_DISABLE","setIsIncButtonDisabled","SET_IS_INC_BUTTON_DISABLE","setIsResetButtonDisabled","SET_IS_RESET_BUTTON_DISABLE","setIsMaxInputError","SET_IS_MAX_INPUT_ERROR","setIsStartInputError","SET_IS_START_INPUT_ERROR","selectors","state","reducer","App","dispatch","useDispatch","useSelector","useEffect","wrapper","SET_MAX_VALUE","setMaxValue","SET_START_VALUE","setStartValue","initialState","rootReducers","combineReducers","action","store","createStore","serializedState","localStorage","getItem","JSON","parse","err","loadState","applyMiddleware","thunk","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d8966eff.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3Zlg-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Value_wrap__3cddL\",\"red\":\"Value_red__3Hj9R\",\"black\":\"Value_black__38Wu1\",\"default\":\"Value_default__3t6TO\",\"num\":\"Value_num__3ChJE\"};","export enum ACTIONS_TYPE {\n    SET_MAX_VALUE = \"SET_MAX_VALUE\",\n    SET_START_VALUE = \"SET_START_VALUE\",\n    SET_DISPLAY_VALUE = \"SET_DISPLAY_VALUE\",\n    SET_IS_SET_BUTTON_DISABLE = \"SET_IS_SET_BUTTON_DISABLE\",\n    SET_IS_INC_BUTTON_DISABLE = \"SET_IS_INC_BUTTON_DISABLE\",\n    SET_IS_RESET_BUTTON_DISABLE = \"SET_IS_RESET_BUTTON_DISABLE\",\n    SET_IS_MAX_INPUT_ERROR = \"SET_IS_MAX_INPUT_ERROR\",\n    SET_IS_START_INPUT_ERROR = \"SET_IS_START_INPUT_ERROR\",\n}\n\ntype SetMaxValueType = {\n    type: ACTIONS_TYPE.SET_MAX_VALUE,\n    payload: {\n        maxValue: number,\n    }\n}\nexport const setMaxValue = (maxValue: number): SetMaxValueType => {\n    return {type: ACTIONS_TYPE.SET_MAX_VALUE, payload: {maxValue}}\n}\n\ntype SetStartValueType = {\n    type: ACTIONS_TYPE.SET_START_VALUE,\n    payload: {\n        startValue: number,\n    }\n}\nexport const setStartValue = (startValue: number): SetStartValueType => {\n    return {type: ACTIONS_TYPE.SET_START_VALUE, payload: {startValue}}\n}\n\ntype SetDisplayValueType = {\n    type: ACTIONS_TYPE.SET_DISPLAY_VALUE,\n    payload: {\n        displayValue: number | string\n    }\n}\nexport const setDisplayValue = (displayValue: number | string): SetDisplayValueType => {\n    return {type: ACTIONS_TYPE.SET_DISPLAY_VALUE, payload: {displayValue}}\n}\n\ntype setIsSetButtonDisabledType = {\n    type: ACTIONS_TYPE.SET_IS_SET_BUTTON_DISABLE,\n    payload: {\n        isSetButtonDisabled: boolean\n    }\n}\nexport const setIsSetButtonDisabled = (isSetButtonDisabled: boolean): setIsSetButtonDisabledType => {\n    return {type: ACTIONS_TYPE.SET_IS_SET_BUTTON_DISABLE, payload: {isSetButtonDisabled}}\n}\n\ntype setIsIncButtonDisabledType = {\n    type: ACTIONS_TYPE.SET_IS_INC_BUTTON_DISABLE,\n    payload: {\n        isIncButtonDisabled: boolean\n    }\n}\nexport const setIsIncButtonDisabled = (isIncButtonDisabled: boolean): setIsIncButtonDisabledType => {\n    return {type: ACTIONS_TYPE.SET_IS_INC_BUTTON_DISABLE, payload: {isIncButtonDisabled}}\n}\n\ntype setIsResetButtonDisabledType = {\n    type: ACTIONS_TYPE.SET_IS_RESET_BUTTON_DISABLE,\n    payload: {\n        isResetButtonDisabled: boolean\n    }\n}\nexport const setIsResetButtonDisabled = (isResetButtonDisabled: boolean): setIsResetButtonDisabledType => {\n    return {type: ACTIONS_TYPE.SET_IS_RESET_BUTTON_DISABLE, payload: {isResetButtonDisabled}}\n}\n\ntype setIsMaxInputErrorType = {\n    type: ACTIONS_TYPE.SET_IS_MAX_INPUT_ERROR,\n    payload: {\n        isMaxInputError: boolean\n    }\n}\nexport const setIsMaxInputError = (isMaxInputError: boolean): setIsMaxInputErrorType => {\n    return {type: ACTIONS_TYPE.SET_IS_MAX_INPUT_ERROR, payload: {isMaxInputError}}\n}\n\ntype setIsStartInputErrorType = {\n    type: ACTIONS_TYPE.SET_IS_START_INPUT_ERROR,\n    payload: {\n        isStartInputError: boolean\n    }\n}\nexport const setIsStartInputError = (isStartInputError: boolean): setIsStartInputErrorType => {\n    return {type: ACTIONS_TYPE.SET_IS_START_INPUT_ERROR, payload: {isStartInputError}}\n}\n\nexport type ReducersTypes =\n    SetMaxValueType\n    | SetStartValueType\n    | SetDisplayValueType\n    | setIsSetButtonDisabledType\n    | setIsIncButtonDisabledType\n    | setIsResetButtonDisabledType\n    | setIsMaxInputErrorType\n    | setIsStartInputErrorType","import React from 'react';\nimport s from './Value.module.css';\n\ntype DisplayValueType = {\n    maxValue: number\n    displayValue: number | string\n}\n\n\nconst DisplayValue = (props: DisplayValueType) => {\n\n\n    let finalStyle = () => {\n        if (props.displayValue === +props.maxValue) {\n            return `${s.red} ${s.num} ${s.default}`\n        }\n        if (typeof props.displayValue === 'number') {\n            return `${s.num} ${s.default}`\n        }\n        if (props.displayValue === \"incorrect value\") {\n            return `${s.red} ${s.default} `\n        } else {\n            return `${s.default}`\n        }\n\n    }\n\n    return (\n        <div className={s.wrap}>\n            <div className={finalStyle()}>{props.displayValue}</div>\n        </div>\n    );\n};\n\nexport default DisplayValue;","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\nimport s from '../Button/Button.module.css'\n\ntype DefaultButtonType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\n\ntype ButtonType = DefaultButtonType & {}\n\nconst Button: React.FC<ButtonType> = (\n    {...restProps},\n) => {\n    const finalClassName = `${s.default}`\n    return (\n\n        <button className={finalClassName} {...restProps}  />\n    );\n};\n\nexport default Button;\n","import React from 'react';\nimport s from './Changes.module.css';\nimport Button from \"../../Button/Button\";\n\n\ntype ChangesType = {\n    inc: () => void\n    displayValue: number | string\n    maxValue: number\n    reset: () => void\n    isIncButtonDisabled: boolean\n    isResetButtonDisabled: boolean\n}\n\nconst Changes = (props: ChangesType) => {\n\n\n    return (\n        <div className={s.wrap}>\n            <Button\n                disabled={props.isIncButtonDisabled}\n                onClick={props.inc}>\n                inc\n            </Button>\n            <Button onClick={props.reset} disabled={props.isResetButtonDisabled}>\n                reset\n            </Button>\n        </div>\n    );\n};\n\nexport default Changes;\n","import React from 'react';\nimport DisplayValue from \"./Value/DisplayValue\";\nimport Changes from \"./Changes/Changes\";\n\ntype CounterType = {\n    inc: () => void\n    displayValue: number | string\n    maxValue: number\n    reset: () => void\n    isIncButtonDisabled: boolean\n    isResetButtonDisabled: boolean\n\n}\n\nconst Counter: React.FC<CounterType> = (\n    {displayValue, maxValue, inc, reset, isIncButtonDisabled, isResetButtonDisabled}\n) => {\n    return (\n        <>\n            <DisplayValue displayValue={displayValue} maxValue={maxValue}/>\n            <Changes inc={inc} displayValue={displayValue} maxValue={maxValue} reset={reset}\n                     isIncButtonDisabled={isIncButtonDisabled}\n                     isResetButtonDisabled={isResetButtonDisabled}/>\n        </>\n    );\n};\n\nexport default Counter;","import React, {ChangeEvent} from 'react';\nimport s from \"../SetValue/SetValue.module.css\";\n\ntype SetValueType = {\n    startValue: number\n    maxValue: number\n    changeMaxValue: (e: number) => void\n    changeStartValue: (e: number) => void\n    isMaxInputError: boolean\n    isStartInputError: boolean\n\n}\n\nconst SetValue = (props: SetValueType) => {\n    const changeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\n        props.changeMaxValue(+e.currentTarget.value)\n    }\n    const changeStartValue = (e: ChangeEvent<HTMLInputElement>) => props.changeStartValue(+e.currentTarget.value)\n    const finalClassNameMax = `${s.default} ${props.isMaxInputError ? s.error : ''}`\n    const finalClassNameStart = `${s.default} ${props.isStartInputError ? s.error : ''} `\n    return (\n        <div className={s.wrap}>\n            <div className={s.value}>\n                <div className={s.title}>max value:</div>\n                <input className={finalClassNameMax} type=\"number\" value={props.maxValue} onChange={changeMaxValue}/>\n            </div>\n            <div className={s.value}>\n                <div className={s.title}>start value:</div>\n                <input className={finalClassNameStart} type=\"number\" value={props.startValue}\n                       onChange={changeStartValue}/>\n            </div>\n        </div>\n    );\n};\n\nexport default SetValue;","import React from 'react';\nimport s from \"../../Counter/Changes/Changes.module.css\";\nimport Button from \"../../Button/Button\";\n\ntype SetType = {\n    startValue: number\n    maxValue: number\n    setNewValue: () => void\n    isSetButtonDisabled: boolean\n}\n\nconst SetButton = (props: SetType) => {\n\n    return (\n        <div className={s.wrap}>\n            <Button disabled={props.isSetButtonDisabled} onClick={props.setNewValue}>\n                set\n            </Button>\n        </div>\n    );\n};\n\nexport default SetButton;\n","import React from 'react';\nimport SetValue from \"./SetValue/SetValue\";\nimport SetButton from \"./Set/SetButton\";\n\ntype SetCounterType = {\n    startValue: number\n    maxValue: number\n    changeMaxValue: (e: number) => void\n    changeStartValue: (e: number) => void\n    setNewValue: () => void\n    isSetButtonDisabled: boolean\n    isMaxInputError: boolean\n    isStartInputError: boolean\n}\n\nconst SetCounter = (props: SetCounterType) => {\n    return (\n        <>\n            <SetValue startValue={props.startValue}\n                      maxValue={props.maxValue}\n                      changeMaxValue={props.changeMaxValue}\n                      changeStartValue={props.changeStartValue}\n                      isMaxInputError={props.isMaxInputError}\n                      isStartInputError={props.isStartInputError}\n            />\n            <SetButton startValue={props.startValue}\n                       maxValue={props.maxValue}\n                       setNewValue={props.setNewValue}\n                       isSetButtonDisabled={props.isSetButtonDisabled}/>\n        </>\n    );\n};\n\nexport default SetCounter;","import {IGlobalState} from \"./store\";\n\nexport const selectors = (state:IGlobalState)=> state.reducer","import React, {Dispatch, useEffect} from 'react';\nimport s from './App.module.css';\nimport Counter from \"./components/Counter/Counter\";\nimport SetCounter from \"./components/SetCounter/SetCounter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    ReducersTypes,\n    setDisplayValue,\n    setIsIncButtonDisabled, setIsMaxInputError, setIsResetButtonDisabled,\n    setIsSetButtonDisabled, setIsStartInputError,\n    setMaxValue,\n    setStartValue\n} from \"./redux/actions\";\nimport {selectors} from \"./redux/selectors\";\n\n\n\nfunction App() {\n    const dispatch = useDispatch<Dispatch<ReducersTypes>>()\n    const {\n        maxValue,\n        startValue,\n        displayValue,\n        isSetButtonDisabled,\n        isIncButtonDisabled,\n        isResetButtonDisabled,\n        isMaxInputError,\n        isStartInputError\n    } = useSelector(selectors);\n\n    useEffect(() => {\n        if (maxValue === startValue) {\n            dispatch(setIsStartInputError(true))\n            dispatch(setIsMaxInputError(true))\n        }\n        if (maxValue > startValue) {\n            dispatch(setIsMaxInputError(false))\n            dispatch(setIsStartInputError(false))\n        }\n        if (maxValue < startValue) {\n            dispatch(setIsMaxInputError(true))\n            dispatch(setIsStartInputError(true))\n        }\n        if (startValue < 0) {\n            dispatch(setIsStartInputError(true))\n        }\n        if (displayValue === maxValue) {\n            dispatch(setIsIncButtonDisabled(true))\n        }\n\n    }, [startValue, maxValue, displayValue])\n\n    const changeMaxValue = (maxValue: number) => {\n        dispatch(setMaxValue(maxValue))\n        dispatch(setIsIncButtonDisabled(true))\n        dispatch(setIsResetButtonDisabled(true))\n        if (maxValue === startValue || maxValue < startValue || startValue < 0) {\n            dispatch(setIsSetButtonDisabled(true))\n            dispatch(setDisplayValue(\"incorrect value\"))\n        } else {\n            dispatch(setIsSetButtonDisabled(false))\n            dispatch(setDisplayValue(\"enter values and press 'set'\"))\n        }\n    }\n    const changeStartValue = (startValue: number) => {\n        dispatch(setStartValue(startValue))\n        dispatch(setIsIncButtonDisabled(true))\n        dispatch(setIsResetButtonDisabled(true))\n        if (maxValue === startValue || maxValue < startValue || startValue < 0) {\n\n            dispatch(setIsSetButtonDisabled(true))\n            dispatch(setDisplayValue(\"incorrect value\"))\n        } else {\n            dispatch(setIsSetButtonDisabled(false))\n            dispatch(setDisplayValue(\"enter values and press 'set'\"))\n        }\n    }\n    const setNewValue = () => {\n        dispatch(setIsSetButtonDisabled(true))\n        dispatch(setDisplayValue(startValue))\n        dispatch(setIsIncButtonDisabled(false))\n        dispatch(setIsResetButtonDisabled(false))\n    }\n    const increment = () => {\n        dispatch(setDisplayValue(+displayValue + 1))\n    }\n    const reset = () => {\n        dispatch(setDisplayValue(startValue))\n        dispatch(setIsIncButtonDisabled(false))\n    }\n\n\n    return (\n        <>\n            <div className={s.wrapper}>\n                <div className={s.wrap}>\n                    <SetCounter startValue={startValue}\n                                maxValue={maxValue}\n                                changeMaxValue={changeMaxValue}\n                                changeStartValue={changeStartValue}\n                                setNewValue={setNewValue}\n                                isMaxInputError={isMaxInputError}\n                                isStartInputError={isStartInputError}\n                                isSetButtonDisabled={isSetButtonDisabled}\n                    />\n                </div>\n                <div className={s.wrap}>\n                    <Counter inc={increment}\n                             reset={reset}\n                             displayValue={displayValue}\n                             maxValue={maxValue}\n                             isIncButtonDisabled={isIncButtonDisabled}\n                             isResetButtonDisabled={isResetButtonDisabled}/>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport default App;\n\n\n","import {ACTIONS_TYPE, ReducersTypes} from \"./actions\";\n\nexport type InitialStateType = {\n    maxValue: number,\n    startValue: number,\n    displayValue: string | number,\n    isSetButtonDisabled: boolean,\n    isIncButtonDisabled: boolean,\n    isResetButtonDisabled: boolean,\n    isMaxInputError: boolean,\n    isStartInputError: boolean,\n}\n\nconst initialState: InitialStateType = {\n    maxValue: 0,\n    startValue: 0,\n    displayValue: \"\",\n    isSetButtonDisabled: true,\n    isIncButtonDisabled: true,\n    isResetButtonDisabled: true,\n    isMaxInputError: true,\n    isStartInputError: true\n}\n\nexport const reducer = (state: InitialStateType = initialState, action: ReducersTypes): InitialStateType => {\n    switch (action.type) {\n        case ACTIONS_TYPE.SET_MAX_VALUE:\n        case ACTIONS_TYPE.SET_START_VALUE:\n        case ACTIONS_TYPE.SET_DISPLAY_VALUE:\n        case ACTIONS_TYPE.SET_IS_SET_BUTTON_DISABLE:\n        case ACTIONS_TYPE.SET_IS_INC_BUTTON_DISABLE:\n        case ACTIONS_TYPE.SET_IS_RESET_BUTTON_DISABLE:\n        case ACTIONS_TYPE.SET_IS_MAX_INPUT_ERROR:\n        case ACTIONS_TYPE.SET_IS_START_INPUT_ERROR:\n            return {\n                ...state,\n                ...action.payload\n            }\n    }\n    return state\n}\n\n","import {reducer} from \"./reducer\";\nimport { combineReducers, createStore,applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport {loadState, saveState} from \"../utils/localstorage-utils\";\n\nconst rootReducers = combineReducers({\n    reducer : reducer ,\n});\n\nexport type IGlobalState = ReturnType<typeof rootReducers>;\nexport const store = createStore(rootReducers,loadState(),applyMiddleware(thunk));\n\nstore.subscribe(()=>{\n    saveState({\n        reducer: store.getState().reducer\n    })\n})\n","\nimport {IGlobalState} from \"../redux/store\";\n\nexport const loadState = () => {\n    try {\n        const serializedState = localStorage.getItem('state');\n        if (serializedState === null) {\n            return undefined;\n        }\n        return JSON.parse(serializedState);\n    } catch (err) {\n        return undefined;\n    }\n};\n\nexport const saveState = (state:IGlobalState) => {\n    try {\n        const serializedState = JSON.stringify(state);\n        localStorage.setItem('state', serializedState);\n    } catch {\n        // ignore write errors\n    }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport {store} from \"./redux/store\";\nimport {Provider} from \"react-redux\";\n\n\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>\n\n    , document.getElementById('root')\n);\n\n//reportWebVitals();\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"SetValue_wrap__3f-un\",\"value\":\"SetValue_value__3h8vL\",\"default\":\"SetValue_default__EyLgV\",\"error\":\"SetValue_error__3SPxP\",\"title\":\"SetValue_title__1bZxK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Changes_wrap__3FnhT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"App_wrapper__2Rh_f\",\"wrap\":\"App_wrap__29kNz\"};"],"sourceRoot":""}